string region = "a6226d40-7dc8-8db4-dd9a-395ee7c685a5";
integer roll_btn;
integer mod_btn;
integer page_btn;
integer pause_btn;


list tgt_btns;

float range = 20.0;
integer health = 6;
integer gRoll;
integer aRoll;

integer lchan;  // chan to hear other huds and admin hud
integer lhandle;

integer tchan;  // chan to target another hud
integer thandle;

integer rchan;    // chan to select race
integer rhandle;

integer modchan; // chan to set modifiers
integer modhandle;

integer rollchan; // chan to select roll type
integer rollhandle;

integer adminchan;
integer adminhandle;

integer titlerchan;

integer pagechan = -72432346;
integer pagemenu;
integer pagehandle;

integer achan;

key target;
key owner;

integer atk_mod = 0;
integer evade_mod = 0;
integer stealth_mod = 0;
integer detect_mod = 0;
integer strength_mod = 0; 
integer mod_points = 6;

//>>>>>>>database keys<<<<<<<<<<<<<<<
integer lsatk_mod;
integer lsevade_mod;
integer lsstealth_mod;
integer lsdetect_mod;
integer lsstrength_mod;
integer lsmod_points;

//_________________________________

// >>>>> squares on HUD<<<<<<<<<<

list hp_btns;
list roll_btns;
list ev_btns;
list st_btns;
list dt_btns;
list str_btns;
//_________________________________

// >>>> dice rolls <<<<<<<<

integer attack_roll;
integer evade_roll;
integer detect_roll;
integer stealth_roll;
integer astrength_roll;
integer tstrength_roll;

integer max_roll = 20;

//__________________________



 

list races  = ["Human", "Bio-Mech","Android","Replicant","Were","Neo-Vampire"];

string race;
integer lsrace;

vector WHITE = <1.0, 1.0, 1.0>;
vector RED = <1.0, 0.0, 0.0>;

string roll_type;

string lshealth;
key hfull = "445137f7-4c42-8401-01f8-2781b511a898"; //UUID of full health icon.
key hempty = "66bdda5a-a593-23b3-5026-7f867ce231df"; //UUID of empty health icon.

list order_buttons(list buttons)
{
    return llList2List(buttons, -3, -1) + llList2List(buttons, -6, -4) +
        llList2List(buttons, -9, -7) + llList2List(buttons, -12, -10);
}

integer menuindex;

DialogPlus(key avatar, string message, list buttons, integer channel, integer CurMenu)
{
    if (12 < llGetListLength(buttons))
    {
        list lbut = buttons;
        list Nbuttons = [];
        if(CurMenu == -1)
        {
            CurMenu = 0;
            menuindex = 0;
        }

        if((Nbuttons = (llList2List(buttons, (CurMenu * 10), ((CurMenu * 10) + 9)) + ["Back", "Next"])) == ["Back", "Next"])
            DialogPlus(avatar, message, lbut, channel, menuindex = 0);
        else
            llDialog(avatar, message,  order_buttons(Nbuttons), channel);
    }
    else
        llDialog(avatar, message,  order_buttons(buttons), channel);
}


ModMenu()
{
    
   if(mod_points > 0) 
   { 
   llListenRemove(modhandle);
   modhandle = llListen(modchan,"",owner,"");
   llDialog(owner, "\n\nYou have "+(string)mod_points+" to spend\n\nSelect a modifier to add a point to: ", order_buttons(["Attack", "Evade", "Stealth", "Detect","Strength"]), modchan);
   Timer();
   }
   
   else
   {
       llListenRemove(modhandle);
       llOwnerSay("You have no more modifier points to spend.");
       
    }
   
    
    
    
    
    
}


integer Roll()
{
    
  // integer r = llRound(llFrand(20.0));
  
  integer r = (integer)(llFrand(21.0));

   
   if(r == 0)
   {
      
       return Roll();
   }
   
   else
   { 
   return r; 
   }
}

integer Modify(integer r, integer m)
{
    
  integer perc;
  
  perc = m * 5;
  
   
    
  integer mod = llRound((float)perc/100 * r) ;  
  
  
  
    
  return mod + r;  
}

list Sort(list tmp)
{
    
    
  tmp = llListSort(tmp, 2, TRUE);
  
  tmp = llList2ListStrided(llDeleteSubList(tmp, 0, 0),0,-1,2);
    
   return tmp;
}


SetSquares(list tmp,integer h, key txt1,key txt2, vector col,  integer dir) // dir is direction to suptract square, 1 will subtract the first square, 0 will subtract the last square
{
    h = h - 1;
    integer i;
    integer tlength = llGetListLength(tmp);
  
  
  if(dir = 1) 
  {
  
     for(i = 0; i < tlength; ++ i)
     {
         
       if(i <= h)
       {
              // [ PRIM_COLOR, integer face, vector color, float alpha ]
           llSetLinkPrimitiveParamsFast(llList2Integer(tmp,i),[PRIM_TEXTURE,ALL_SIDES,txt1,<1.0, 1.0, 0.0>, <0.0, 0.0, 0.0>, 0.0,PRIM_COLOR,ALL_SIDES,col,1.0]);
           
        }
        
        else if(i > h)  
        {
             llSetLinkPrimitiveParamsFast(llList2Integer(tmp,i),[PRIM_TEXTURE,ALL_SIDES,txt2,<1.0, 1.0, 0.0>, <0.0, 0.0, 0.0>, 0.0,PRIM_COLOR,ALL_SIDES,col,0.0]);
            
            
        } 
         
      
     }
     
   }
   
   else if(dir = 0)
   {
        for(i = tlength; i > -1; -- i)
     {
         
       if(i <= h)
       {
              // [ PRIM_COLOR, integer face, vector color, float alpha ]
           llSetLinkPrimitiveParamsFast(llList2Integer(tmp,i),[PRIM_TEXTURE,ALL_SIDES,txt1,<1.0, 1.0, 0.0>, <0.0, 0.0, 0.0>, 0.0,PRIM_COLOR,ALL_SIDES,col,1.0]);
           
        }
        
        else if(i > h)  
        {
             llSetLinkPrimitiveParamsFast(llList2Integer(tmp,i),[PRIM_TEXTURE,ALL_SIDES,txt2,<1.0, 1.0, 0.0>, <0.0, 0.0, 0.0>, 0.0,PRIM_COLOR,ALL_SIDES,col,0.0]);
            
            
        } 
         
      
     }
       
       
       
    } 
    
    
}

SetAlpha(list tmp)
{
  
  integer a;
  integer tlength = llGetListLength(tmp);
  
  
  for(a = 0; a < tlength; ++ a)
  {
    
      llSetLinkAlpha(llList2Integer(tmp,a), 0.0, ALL_SIDES);
      
  }  
    
}

Timer()
{
  
  llSetTimerEvent(0.0); 
  llSetTimerEvent(120.0);   
    
}


Read()
{
    atk_mod = (integer)llLinksetDataRead("lsatk_mod");
    evade_mod = (integer)llLinksetDataRead("lsevade_mod");
    stealth_mod = (integer)llLinksetDataRead("lsstealth_mod");
    detect_mod = (integer)llLinksetDataRead("lsdetect_mod");
    strength_mod = (integer)llLinksetDataRead("lsstrength_mod");
    mod_points = (integer)llLinksetDataRead("lsmod_points"); 
    
     SetSquares(roll_btns,atk_mod, TEXTURE_BLANK, TEXTURE_BLANK, RED,  1);
     SetSquares(ev_btns,evade_mod, TEXTURE_BLANK, TEXTURE_BLANK, RED,  1);
     SetSquares(st_btns,stealth_mod, TEXTURE_BLANK, TEXTURE_BLANK, RED,  1);
     SetSquares(dt_btns,detect_mod, TEXTURE_BLANK, TEXTURE_BLANK, RED,  1);
     SetSquares(str_btns,strength_mod, TEXTURE_BLANK, TEXTURE_BLANK, RED,  1);
    
    
}

Write(integer dir)  // dir is direction to suptract square, 1 will subtract the first square, 0 will subtract the last square
{
     lsatk_mod = llLinksetDataWrite("lsatk_mod",(string)atk_mod);
     lsevade_mod = llLinksetDataWrite("lsevade_mod",(string)evade_mod);
     lsstealth_mod = llLinksetDataWrite("lsstealth_mod",(string)stealth_mod);
     lsdetect_mod = llLinksetDataWrite("lsdetect_mod",(string)detect_mod);
     lsstrength_mod = llLinksetDataWrite("lsstrength_mod",(string)strength_mod);
     lsmod_points = llLinksetDataWrite("lsmod_points",(string)mod_points);
     
    
     SetSquares(roll_btns,atk_mod, TEXTURE_BLANK, TEXTURE_BLANK, RED,  dir);
     SetSquares(ev_btns,evade_mod, TEXTURE_BLANK, TEXTURE_BLANK, RED,  dir);
     SetSquares(st_btns,stealth_mod, TEXTURE_BLANK, TEXTURE_BLANK, RED,  dir);
     SetSquares(dt_btns,detect_mod, TEXTURE_BLANK, TEXTURE_BLANK, RED,  dir);
      SetSquares(str_btns,strength_mod, TEXTURE_BLANK, TEXTURE_BLANK, RED,  1);
    
}

integer Paused = FALSE;

RegionCheck()
{
     list details = llGetParcelDetails(llGetPos(), [PARCEL_DETAILS_ID]);
        if (llList2String(details ,0) != region)
        {
          Paused = TRUE;
           llOwnerSay("User detected off sim. Healing suspended."); 
            
            
        }
        
        else
        {
             llOwnerSay("User detected on sim. Healing allowed."); 
            Paused = FALSE;
            
            
            
         }
    
    
    
}




default
{
    
    on_rez(integer start_param)
    {
        
        llResetScript();
       
        
    }
    
    state_entry()
    {
      //llLinksetDataReset();
      
       
       owner = llGetOwner(); 

      RegionCheck();
       
        tchan = ((integer)("0x"+llGetSubString((string)llGetKey(),-8,-1)) - 6368) | 0x8000000;
        lchan = ((integer)("0x"+llGetSubString((string)owner,-8,-1)) - 7863) | 0x8000000;
        rchan = ((integer)("0x"+llGetSubString((string)owner,-8,-1)) - 8421) | 0x8000000;
        modchan = ((integer)("0x"+llGetSubString((string)owner,-8,-1)) - 3257) | 0x8000000;
        rollchan = ((integer)("0x"+llGetSubString((string)owner,-8,-1)) - 1257) | 0x8000000;
        adminchan = ((integer)("0x"+llGetSubString((string)owner,-8,-1)) - 23646) | 0x8000000;
        pagemenu = ((integer)("0x"+llGetSubString((string)owner,-8,-1)) - 7243) | 0x8000000;
        titlerchan = ((integer)("0x"+llGetSubString((string)owner,-8,-1)) - 848537) | 0x8000000;
         
        
        
       
         llListenRemove(lhandle);
            lhandle = llListen(lchan, "","", "");   
       
          llListenRemove(adminhandle);
          adminhandle = llListen(adminchan, "","", ""); 
       
       integer total_prims = llGetNumberOfPrims()+1;
       integer p;
       
       
       hp_btns = [];
       roll_btns = [];
       ev_btns = [];
       st_btns = [];
       dt_btns = [];
       str_btns = [];
       
       
       for(p = 0; p < total_prims; ++p)
       {
          
          string lnk = llToLower(llGetLinkName(p)); 
          
          if(lnk == "roll_button")
          {
              roll_btn = p;
          }
          
          else if(lnk == "modifier_button")
          {
              mod_btn = p;
          }
          
          else if(lnk == "page_button")
          {
              page_btn = p;
          }
          
           else if(lnk == "pause_button")
          {
              pause_btn = p;
          }
          
          else if(lnk == "hp1"|lnk == "hp2"|lnk == "hp3"|lnk == "hp4"|lnk == "hp5"|lnk == "hp6")
          {
              
              hp_btns += [lnk,p]; 
          }
          
          
           else if(lnk == "atk1"|lnk == "atk2"|lnk == "atk3"|lnk == "atk4"|lnk == "atk5"|lnk == "atk6")
          {
              roll_btns += [lnk, p]; 
          }
          
           else if(lnk == "ev1"|lnk == "ev2"|lnk == "ev3"|lnk == "ev4"|lnk == "ev5"|lnk == "ev6")
          {
              ev_btns += [lnk, p]; 
          }
         
          
           else if(lnk == "st1"|lnk == "st2"|lnk == "st3"|lnk == "st4"|lnk == "st5"|lnk == "st6")
          {
              st_btns += [lnk, p]; 
          }
          
            else if(lnk == "dt1"|lnk == "dt2"|lnk == "dt3"|lnk == "dt4"|lnk == "dt5"|lnk == "dt6")
          {
              dt_btns += [lnk, p]; 
          }  
          
           else if(lnk == "str1"|lnk == "str2"|lnk == "str3"|lnk == "str4"|lnk == "str5"|lnk == "str6")
          {
              str_btns += [lnk, p]; 
          }      
           
       }
       
       hp_btns = Sort(hp_btns);
       roll_btns = Sort(roll_btns);
       ev_btns = Sort(ev_btns);
       st_btns = Sort(st_btns);
       dt_btns = Sort(dt_btns);
       str_btns = Sort(str_btns);
       
       
       SetAlpha( hp_btns);
      
       SetAlpha(roll_btns);
       
       SetAlpha(ev_btns);
      
       SetAlpha(st_btns);
       
       SetAlpha(dt_btns);
       
       SetAlpha(str_btns);
       
       llSleep(2.0);
       
       
       lshealth = llLinksetDataRead("lshealth");
       
       
       
       
       
       if(lshealth == "")
       {
         
         health =   6;
         llLinksetDataWrite("lshealth",(string)health);
           
       }
       
       else 
       {
       
         health = (integer)lshealth;
         
       
        
       
       }
       
       llSay(titlerchan,(string)health);
        
     //  SetSquare(list tmp,integer h, key txt1,key txt2, vector col, integer dir) 
     
     SetSquares(hp_btns,health, hfull,hempty, WHITE, 1);
     
      race = llLinksetDataRead("lsrace");
      
      if(race == "")
      {
           
          llListenRemove(rhandle);
          rhandle =llListen(rchan,"",owner,"");
          
          llDialog(owner,"\nSelect your race:",races,rchan);
           Timer();
          
      }
      
      else
      {
         
        Read();  
         
             
      }
     
     
     
     
    }

    touch_end(integer total_number)
    {
       key Toucher = llDetectedKey(0);
        
       if(Toucher == owner)
       {
           
       race = llLinksetDataRead("lsrace");
      
      if(race == "")
      {
          llListenRemove(rhandle);
          rhandle =llListen(rchan,"",owner,"");
          
          llDialog(owner,"\nSelect your race:",races,rchan);
           Timer();
       }
       
       
       else
       {    
           
        
       integer touched = llDetectedLinkNumber(0);
       
       if(touched == roll_btn)
       {
           
           llListenRemove(rollhandle);
           rollhandle = llListen(rollchan,"",owner,"");
           Timer();
           llDialog(owner,"\nSelect to roll for Attack, Detect or Strength.\n",["Attack", "Detect", "Strength"],rollchan);
           
           
           
           
            
            
            
           
       }  // if(touched == roll_btn)
       
       
       else if(touched == mod_btn)
       {
          
          ModMenu(); 
           
           
       }
       
       else if(touched == page_btn)
       {
          
          llListenRemove(pagehandle);
          pagehandle = llListen(pagemenu,"",owner,"");
          Timer();
          llDialog(owner, "\nWould you like to page nearby admins?",["Yes","No"],pagemenu);
           
           
       }
       
        else if(touched == pause_btn)
       {
           llDialog(owner,"\nSelect to pause or resume the helth timer", ["Pause", "Resume"],lchan);
           
           
       }
       
       }// if race is not empty
       
       }  // toucher == owner
       
    } // touch_end
    
    
     link_message(integer sender, integer num, string msg, key id)
    {
        msg = llToLower(msg);
        
        if(msg == "restore_health")
        {
           health += 1; 
           llLinksetDataWrite("lshealth",(string)health);
           SetSquares(hp_btns,health, hfull,hempty, WHITE, 0);
           llSay(titlerchan,(string)health);;
        
           
          if(health < 6)
          { 
          llMessageLinked(LINK_SET,health,"set_health_timer","");
          }
          
          else
          {
             llMessageLinked(LINK_SET,health,"pause_health_timer",""); 
            llOwnerSay("Healing active. You are currently at full health.");  
              
          }
            
        }
        
     }
    
    
    
      listen(integer chan, string name, key id, string msg)
    {
       
       
       
     if(chan == lchan)
       {
           
         list tmp = llParseString2List(msg, ["|"],[""]); 
          
           
         string cmd  = llToLower(llList2String(tmp,0));
         string ref =   llList2String(tmp,1);
         
         rchan = ((integer)("0x"+llGetSubString((string)llGetOwnerKey(id),-8,-1)) - 7863) | 0x8000000;
         
         if(cmd == "health_check")
         {
             
              
              
              llRegionSay(rchan, "SEND_HEALTH|"+(string)health);
             
             
             
         }
         
         else if(cmd == "send_health")
         {
             
            if((integer)ref > 0)
            { 
              gRoll = Modify(Roll(),atk_mod);
            
            attack_roll = gRoll;
            
            llOwnerSay("/me rolled a "+(string)gRoll);
             
             
            llRegionSay(rchan, "ATTACK_TARGET|" +(string)gRoll);
            }
            
            else
            {
              llOwnerSay("secondlife:///app/agent/" +  (string)llGetOwnerKey(id) + "/about"+ " does not have health right now."); 
                    
            }
             
         }
         
         else if(cmd == "attack_target")
          {
              attack_roll = (integer)ref;
              
              llOwnerSay("secondlife:///app/agent/" +  (string)llGetOwnerKey(id) + "/about"+ " rolled a "+(string)attack_roll);
              
              gRoll = Modify(Roll(),evade_mod);
              
             llOwnerSay("/me rolled a "+(string)gRoll);
              
              evade_roll = gRoll;
              
                 
              
              llRegionSay(rchan, "EVADE_ATTACK|"+(string)gRoll);
              
              /// do health check here
              
              if(attack_roll > evade_roll) // attacker wins
              {
                 llOwnerSay("/me lost a health point."); 
                 health -= 1 ; 
                  llLinksetDataWrite("lshealth",(string)health);
                 
                 SetSquares(hp_btns,health, hfull,hempty, WHITE, 1);
                 llSay(titlerchan,(string)health);;
                 
                 llMessageLinked(LINK_SET,health,"set_health_timer","");
                 
                  RegionCheck();
                  
              }
              
              else // attacker loses
              {
                  // do or say smething something to attacker
                  
              }
              
              
              
           
              
          }  //if cmd == attack_target
          
          
           else if(cmd == "detect_target")
          {
              detect_roll = (integer)ref;
              
              llOwnerSay("secondlife:///app/agent/" +  (string)llGetOwnerKey(id) + "/about"+ " rolled a "+(string)detect_roll);
              
              gRoll = Modify(Roll(),stealth_mod);
              
             llOwnerSay("/me rolled a "+(string)gRoll);
              
              stealth_roll = gRoll;
              
              
              llRegionSay(rchan, "STEALTH_ATTACK|"+(string)gRoll);
              
              /// do health check here
              
              if(detect_roll > stealth_roll)
              {
                   llOwnerSay("You were detected by secondlife:///app/agent/" +  (string)llGetOwnerKey(id) + "/about");
               
                  
              }
              
              else
              {
                  
                  
              }
              
              
              
           
              
          } 
          
          
          else if(cmd == "strength_target")
          {
              astrength_roll = (integer)ref;
              
              llOwnerSay("secondlife:///app/agent/" +  (string)llGetOwnerKey(id) + "/about"+ " rolled a "+(string)astrength_roll);
              
              gRoll = Modify(Roll(),stealth_mod);
              
             llOwnerSay("/me rolled a "+(string)gRoll);
              
              tstrength_roll = gRoll;
              
                 rchan = ((integer)("0x"+llGetSubString((string)llGetOwnerKey(id),-8,-1)) - 7863) | 0x8000000;
              
              llRegionSay(rchan, "STRENGTH_ATTACK|"+(string)gRoll);
              
              /// do health check here
              
              if(astrength_roll > tstrength_roll)
              {
                   llOwnerSay("secondlife:///app/agent/" +  (string)llGetOwnerKey(id) + "/about was stronger than you.");
               
                  
              }
              
              else
              {
                  
                  
              }
              
              
              
           
              
          } 
          
          else if(cmd == "evade_attack")
          {
              
              evade_roll = (integer)ref;
              
              // notify attacker their of victory or loss
             llOwnerSay("secondlife:///app/agent/" +  (string)llGetOwnerKey(id) + "/about"+ " rolled a "+(string)evade_roll);  

             if(attack_roll > evade_roll)
             {
                 
                llOwnerSay("secondlife:///app/agent/" +  (string)llGetOwnerKey(id) + "/about"+" lost a health point.");   
                 
             }
              
          }
          
          
           else if(cmd == "stealth_attack")
          {
              
              stealth_roll = (integer)ref;
              
              // notify attacker their of victory or loss
             llOwnerSay("secondlife:///app/agent/" +  (string)llGetOwnerKey(id) + "/about"+ " rolled a "+(string)stealth_roll);  

             if(detect_roll > stealth_roll)
             {
                 
                llOwnerSay("/me detected secondlife:///app/agent/" +  (string)llGetOwnerKey(id) + "/about"+".");   
                 
             }
              
          }
          
          else if(cmd == "strength_attack")
          {
              
              tstrength_roll = (integer)ref;
              
              // notify attacker their of victory or loss
             llOwnerSay("secondlife:///app/agent/" +  (string)llGetOwnerKey(id) + "/about"+ " rolled a "+(string)tstrength_roll);  

             if(astrength_roll > tstrength_roll)
             {
                 
                llOwnerSay("You were stronger than secondlife:///app/agent/" +  (string)llGetOwnerKey(id) + "/about"+".");   
                 
             }
              
          }
          
          else if(cmd == "pause")
          {
             if(health < 6)
              {  
             llMessageLinked(LINK_SET, 0 ,"pause_health_timer",""); 
              }
              
              else
              {
                
                llOwnerSay("You are at full health.");
                  
              }
          }
          
          else if(cmd == "resume")
          {
              if(health < 6)
              {
               llMessageLinked(LINK_SET, health ,"resume_health_timer",""); 
              }
              
          } 
           
           
        } // lchan
        
        else if(chan == rchan)
        {
          // races  = ["Human", "Bio-Mech","Android","Replicant","Were","Neo-Vampire"]; 
          msg = llToLower(msg);
          if(msg == "human")
          {
            mod_points = 6;  
              
          }
          
          
          else if(msg == "bio-mech")
          {
            
             strength_mod = evade_mod + 3;
             mod_points = mod_points - 3;
              
          }
          
           else if(msg == "android")
          {
              
             detect_mod = detect_mod + 3;
             mod_points = mod_points - 3;
              
          }
          
           else if(msg == "replicant")
          {
              
             evade_mod = evade_mod + 3;
             mod_points = mod_points - 3;
              
          }
          
           else if(msg == "were")
          {
             // SetSquares(list tmp,integer h, key txt1,key txt2, vector col,  integer dir)
            
             atk_mod = atk_mod + 2;
             SetSquares(dt_btns,2,  TEXTURE_BLANK, TEXTURE_BLANK, RED,  1);
             detect_mod = detect_mod+2;
             mod_points = mod_points - 4;
              
          }
          
           else if(msg == "neo-vampire")
          {
             
             evade_mod = evade_mod + 2;
             SetSquares(st_btns,2,  TEXTURE_BLANK, TEXTURE_BLANK, RED,  1);
             stealth_mod = stealth_mod+2;
             mod_points = mod_points - 4;
              
          }
          
          // llLinksetDataWrite("lshealth",(string)health);
          race = msg;
          lsrace = llLinksetDataWrite("lsrace",race);
          Write(1);
          
            
            
        }  //else if(chan == rchan)
        
      else if(chan == modchan)
      {
          msg = llToLower(msg);
          
          if(msg == "attack")
          {
            atk_mod = atk_mod + 1;  
              
          }
          
          else if(msg == "evade")
          {
            evade_mod = evade_mod + 1;  
              
          }
          
          else if(msg == "stealth")
          {
            stealth_mod = stealth_mod + 1;  
              
          }
          
          else if(msg == "detect")
          {
            detect_mod = detect_mod + 1;  
              
          }
          
          else if(msg == "strength")
          {
            strength_mod = strength_mod + 1;  
              
          }
          
         mod_points = mod_points - 1; 
         Write(1);
         
         ModMenu();
          
       } 
       
       
       else if(chan == rollchan)
       {
           
          roll_type = llToLower(msg); 
           
         
            tgt_btns = [];
            list avis = llGetAgentList(AGENT_LIST_PARCEL,[]);
            
            vector obj_pos = llGetPos();
            
            integer x;
            
            integer tot = llGetListLength(avis);
            
            
            
            for(x = 0; x < tot; ++x)
            {
             
                key av = llList2Key(avis, x);
                
                if(av != owner)
                {
                
                list tmp = llGetObjectDetails(av,[OBJECT_POS]);
                
                vector avi_pos = llList2Vector(tmp, 0);
                
                float dist = llVecDist(avi_pos,obj_pos);
                
                if(dist < range)
                {
                  
                  tgt_btns += [llKey2Name(av)] + [av];  
                    
                }
                
                }
                
                
            }  // for
            
            if(tgt_btns != [])
            {
                
            llListenRemove(thandle);
            thandle = llListen(tchan, "",owner, "");    
            DialogPlus(owner, "\nSelect someone to attack:", llList2ListStrided(tgt_btns,0,-1,2), tchan, menuindex = 0);  
             Timer();
            
            }
            
            else
            {
              llListenRemove(thandle);
              llDialog(owner,"\nThere is no one in range.",[],-34);  
                
            }  
            
         
           
           
       }  // rollchan
       
       
       else if(chan == tchan)
        {

        // If they clicked Next it will go to the next dialog window
        if(msg == "Next")
        {
            // ++menuindex will turn menuindex plus 1, making it give the next page.
            DialogPlus(owner, "Select a target:", llList2ListStrided(tgt_btns,0,-1,2), chan, ++menuindex);
        }

        //if they clicked back it will go to the last dialog window.
        else if(msg == "Back")
        {
            // --menuindex will turn menuindex minus 1, making it give the previous page.
            DialogPlus(owner, "Select a target", llList2ListStrided(tgt_btns,0,-1,2), chan, --menuindex);
        }

        // If they choose anything besides Back/Next it will be in this section
        else
        {
            //Be Safe
            llListenRemove(thandle);
            //Example used, change to whatever you wish.
           
            
           
            
            integer idx = llListFindList(tgt_btns, [msg]);
            
            target = llList2Key(tgt_btns, idx+1);
            
         achan = ((integer)("0x"+llGetSubString((string)target,-8,-1)) - 7863) | 0x8000000;
            
           if(roll_type == "attack")
           {  
            
            llRegionSay(achan, "HEALTH_CHECK");
            
            }
            
             else if(roll_type == "detect")
           { 
            gRoll = Modify(Roll(),detect_mod);
            
            detect_roll = gRoll;
            
            llOwnerSay("/me rolled a "+(string)gRoll);
             
           
            llRegionSay(achan, "DETECT_TARGET|" +(string)gRoll);
            
            }
            
            
             else if(roll_type == "strength")
           { 
            gRoll = Modify(Roll(),strength_mod);
            
            astrength_roll = gRoll;
            
            llOwnerSay("/me rolled a "+(string)gRoll);
             
             
            llRegionSay(achan, "STRENGTH_TARGET|" +(string)gRoll);
            
            }
            
            
           
            
            
            
           
        }
        
        
       } // if(chan == tchan)
       
       
       else if(chan == adminchan)
       {
         msg = llToLower(msg);
         
         if(msg == "reset_hud")
         {
            llLinksetDataReset(); 
            llResetScript();    
             
         }
         
         else if(msg == "get_health")
         {
            
            llRegionSay(adminchan,"send_health|" + (string)health); 
             
         }
         
         else if(msg == "add_health_point")
         {
              health += 1; 
           llLinksetDataWrite("lshealth",(string)health);
            SetSquares(hp_btns,health, hfull,hempty, WHITE, 0);
            llSay(titlerchan,(string)health);
           
           
          if(health < 6)
          { 
          llMessageLinked(LINK_SET,health,"set_health_timer","");
          }
          
          else
          {
               llMessageLinked(LINK_SET,health,"pause_health_timer","");
            llOwnerSay("Healing stopped. You are currently at full health.");  
              
          }
             
             
             
         }
    
       } // else if(chan == adminchan)
       
       else if(chan == pagemenu)
       {
           
           if(msg == "Yes")
           {
               
              llOwnerSay("Paging nearby admins!");
              llRegionSay(pagechan,"Paging all admins!"); 
               
           }
           
       }
        
    } // listen 
    
    
    changed(integer change)
    {
        
      if(change & CHANGED_LINK)
      {
          
        llResetScript();  
          
      }  
      
       else if(change & CHANGED_OWNER)
      {
        llLinksetDataReset(); 
        llResetScript();  
          
      } 
      
      else if(change & (CHANGED_REGION | CHANGED_TELEPORT | CHANGED_REGION_START ))
      {
          
       RegionCheck();
          
      } 
        
    }
    
    timer()
    {
        
       
     
        llListenRemove(thandle); 
        llListenRemove(rhandle); 
        llListenRemove(modhandle);
        llListenRemove(rollhandle);
        llListenRemove(pagehandle);
        
        
        
    }
    
    
}
